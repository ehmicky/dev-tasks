name: Build
on: [push, pull_request]
env:
  # GitHub actions does not define this but should
  CI: 'true'
jobs:
  build:
    strategy:
      # Test on Windows/Mac/Linux using latest Node.js.
      # Also test on Linux with older Node.js versions.
      # We do not run each possible combination to make CI faster.
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        node: [10.17.0, 13]
        exclude:
          - os: macOS-latest
            node: 10.17.0
          - os: windows-latest
            node: 10.17.0
      fail-fast: false
    runs-on: ${{ matrix.os }}
    # We do not use @actions/cache because restoring/saving cache currently
    # takes more time than the time saved on `npm ci`
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: npm ci
      - name: Linting
        run: npx gulp check
      - name: Build
        run: npx gulp build
      - name: Tests
        run: npx gulp unit
      - name: Upload test coverage
        run: npx gulp uploadCoverage
  # Performed after each OS + Node.js version combination has succeeded
  final:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Node.js 13
        uses: actions/setup-node@v1
        with:
          node-version: 13
      - name: Install dependencies
        run: npm ci
      # Test coverage check must happen after tests for the whole matrix have been
      # performed, so we get the merged coverage map
      # - name: Check test coverage
      #   run: npx gulp checkCoverage
      # TODO: make it work
      # TODO: ensure this does not sure if previous jobs failed
      # Deployment must happen after tests for the whole matrix have been
      # performed, so we use `jobs.include` with a different `stage`.
      - name: Deploy
        run: env | sort
      #   if: type != pull_request && tag is not blank
      #   # TODO: pass NPM_TOKEN
      #   run: npx gulp publish
